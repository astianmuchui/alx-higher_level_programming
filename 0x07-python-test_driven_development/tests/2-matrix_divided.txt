===============================
2-matrix_divided.py
===============================

``matrix_divided()`` , a function that divides all elements of a matrix
and returns a new one

matrix must be a list that contains a other lists
of integers or floats. else a TypeError exception is raised

::

	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
	>>> matrix_divided(7, 10)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats
	>>> matrix_divided([["cody", 38, 39], [28, 2.8, "rhodes"]], 3.8)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Each row of the matrix must be of the same size, else a TypeError exception is raised
::

	>>> matrix_divided([[8, 4, 2], [1, 9]], 7)
	Traceback (most recent call last):
	TypeError: Each row of the matrix must have the same size

div must be a number (integer or float), else a TypeError exception is raised.

::

	>>> matrix_divided([[10, 20], [15, 9]], "cody")
	Traceback (most recent call last):
	TypeError: div must be a number

div cannot be equal to 0, else raise a ZeroDivisionError.

::

	>>> matrix_divided([[19, 6, 3], [18, 7, 7]], 0)
	Traceback (most recent call last):
	ZeroDivisionError: division by zero

All elements of the matrix should be divided by div, correct to 2.dp.

::

	>>> matrix_divided([[9, 6, 3], [18, 5, 12]], 3)
	[[3.0, 2.0, 1.0], [6.0, 1.67, 4.0]]
